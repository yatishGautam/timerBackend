// Prisma schema for timer application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg" // Output can be a .svg or .png file
}


// User model
model User {
  id            String     @id @default(uuid())
  username      String?    @unique
  email         String     @unique
  passwordHash  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  workouts      Workout[]
  stats         UserStat[]
  exercises     Exercise[]
}

// Workout model
model Workout {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  segments    Segment[]
  stats       UserStat[]
}

// Segment model
model Segment {
  id               String            @id @default(uuid())
  workoutId        String
  workout          Workout           @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  name             String
  sequenceOrder    Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  segmentExercises SegmentExercise[]

  @@unique([workoutId, sequenceOrder])
}

// Exercise model
model Exercise {
  id               String            @id @default(uuid())
  name             String
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  segmentExercises SegmentExercise[] 
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// SegmentExercise model
model SegmentExercise {
  id            String    @id @default(uuid())
  segmentId     String
  exerciseId    String?    
  timerId       String?
  sequenceOrder Int
  segment       Segment   @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  exercise      Exercise? @relation(fields: [exerciseId], references: [id], onDelete: SetNull)
  timer         Timer?    @relation(fields: [timerId], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([segmentId, sequenceOrder])  // Keep this to maintain order
}
// Timer model
model Timer {
  id               String            @id @default(uuid())
  type             TimerType
  duration         Int
  interval         Int?
  repeats          Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  segmentExercises SegmentExercise[]
}

// TimerType Enum
enum TimerType {
  COUNTDOWN
  INTERVAL
  REPEATING
  CUMULATIVE
  ROUND
  STOPWATCH
  CUSTOM
  PYRAMID
  EMOM
  AMRAP
  REST
  PROGRESSIVE
  BEEP
}

// User statistics
model UserStat {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId   String?
  workout     Workout?  @relation(fields: [workoutId], references: [id], onDelete: SetNull)
  completedAt DateTime
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}